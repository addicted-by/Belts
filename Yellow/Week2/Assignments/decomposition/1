enum class QueryType {
    NewBus, BusesForStop,
    StopsForBus, AllBuses
};

struct Query {
    QueryType type;
    string bus;
    string stop;
    vector<string> stops;
};

istream& operator>> (istream& is, Query& q) {

    size_t stop_count;
    string command, bus, stop;
    is >> command;
    if (command == "NEW_BUS") {
        is >> bus >> stop_count;
        vector<string> stops(stop_count);
        for (string& stop_name : stops) {
            is >> stop_name;
        }
        q.type = QueryType::NewBus;
        q.bus = bus;
        q.stops = stops;
    } else if (command == "BUSES_FOR_STOP") {
        is >> stop;
        q.type = QueryType::BusesForStop;
        q.stop = stop;
    } else if (command == "STOPS_FOR_BUS") {
        is >> bus;
        q.type = QueryType ::StopsForBus;
        q.bus = bus;
    } else if (command == "ALL_BUSES") {
        q.type = QueryType::AllBuses;
    }
    return is;
}

struct BusesForStopResponse {
    string stop;
    vector<string> buses;
};

ostream& operator<< (ostream& os, const BusesForStopResponse& r) {
    if (r.buses.empty()) {
        os << "No stop";
    } else {
        for (const string& bus : r.buses) {
            os << bus << " ";
        }
    }
    return os;
}

struct StopsForBusResponse {
    string bus;
    vector<string> stops;
    map<string, BusesForStopResponse> buses_for_stop;
};

ostream& operator<< (ostream& os, const StopsForBusResponse& r) {
        bool flag_end = true, flag_space = true;
        if (r.stops.empty()) {
            os << "No bus";
        } else {
            for (const string& stop : r.stops) {
                flag_space = true;
                if (!flag_end) {
                    os << endl;
                }
                flag_end = false;
                os << "Stop " << stop << ": ";
                if (r.buses_for_stop.at(stop).buses.size() == 1) {
                    os << "no interchange";
                } else {
                    for (const string& bus : r.buses_for_stop.at(stop).buses) {
                        if (!flag_space) {
                            os << " ";
                        }
                        flag_space = false;
                        if (r.bus != bus) {
                            os << bus;
                        }
                    }
                }
            }
        }
        return os;
}

struct AllBusesResponse {
    map<string, vector<string>> buses;
};

ostream& operator<< (ostream& os, const AllBusesResponse& r) {
        bool flag_end = true, flag_space = true;
            if (r.buses.empty()) {
                os << "No buses";
            } else {
                for (const auto& bus_item : r.buses) {
                    flag_space = true;
                    if (!flag_end) {
                        os << endl;
                    }
                    flag_end = false;
                    os << "Bus " << bus_item.first << ": ";
                    for (const string& stop : bus_item.second) {
                        if (!flag_space) {
                            os << " ";
                        }
                        flag_space = false;
                        os << stop;
                    }
                }
            }
        return os;
}

class BusManager {
public:
    void AddBus(const string& bus, const vector<string>& stops) {
        buses_to_stops[bus] = stops;
        for (const auto& i : stops)
            stops_to_buses[i].push_back(bus);

    }
    BusesForStopResponse GetBusesForStop(const string& stop) const {
        if (stops_to_buses.count(stop) == 0) {
            return BusesForStopResponse {stop, vector<string>()};
        } else {
            return BusesForStopResponse {stop, stops_to_buses.at(stop)};
        }
    }
    StopsForBusResponse GetStopsForBus(const string& bus) const {
        vector<string> stops;
                if (buses_to_stops.count(bus) > 0) {
                    stops = buses_to_stops.at(bus);
                } else {
                    stops = {};
                }
                map<string, BusesForStopResponse> buses;
                for (const string& stop : stops) {
                    buses[stop] = GetBusesForStop(stop);
                }
                return StopsForBusResponse {bus, stops, buses};
    }
    AllBusesResponse GetAllBuses() const {
         map<string, vector<string>> buses;
                  if (!buses_to_stops.empty()) {
                    buses = buses_to_stops;
                } else {
                    buses = {};
                }
                return AllBusesResponse {buses};
    }
private:
    map<string, vector<string>> buses_to_stops;
    map<string, vector<string>> stops_to_buses;
};

int main() {
    int query_count;
        Query q;

        cin >> query_count;

        BusManager bm;
        for (int i = 0; i < query_count; ++i) {
            cin >> q;
            switch (q.type) {
                case QueryType::NewBus:
                    bm.AddBus(q.bus, q.stops);
                    break;
                case QueryType::BusesForStop:
                    cout << bm.GetBusesForStop(q.stop) << endl;
                    break;
                case QueryType::StopsForBus:
                    cout << bm.GetStopsForBus(q.bus) << endl;
                    break;
                case QueryType::AllBuses:
                    cout << bm.GetAllBuses() << endl;
                    break;
            }
        }

        return 0;
}